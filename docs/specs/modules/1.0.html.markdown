---
layout: default
title: CommonJS Modules 1.0
---

CommonJS Modules
================

* specification 
  * goal
    * ðŸ’¡how modules should be written -- in order to be --
      * INTEROPERABLE | class of module systems ðŸ’¡ / can be
        * client & server side,
        * secure or insecure,
        * implemented today or supported by future systems
        * ...
  * OWN isolated "top-level" scope / 
    * EACH module
    * private to the module
      * ðŸ‘€== variables & functions / defined | module -- are NOT accessible to -- OTHER modules ðŸ‘€ 
        * UNLESS explicitly exported
  * ðŸ‘€== MINIMUM features / a module system -- MUST provide in order to -- support interoperable modulesðŸ‘€

Contract
--------

### Module Context ###

1. | module, there is a free variable
   1. `require` / it's a function
       1. `require(moduleIdentifier): exportedAPIOfTheForeignModule`
       2. if there is a dependency cycle -> foreign module may NOT have finished executing | required time -- by one of its -- transitive dependencies
          1. `exportedAPIOfTheForeignModule` MUST contain `exports` / foreign module has prepared | BEFORE the call -- to the -- current module's execution
       3. if the requested module can NOT be returned -> `require` must throw an error
   2. `exports` / it's an object 
       1. module may add its API | being executed
       2. ONLY means of exporting

### Module Identifiers ###

1. == String of "terms" / -- delimited by -- forward slashes
   1. term's requirements
      1. camelCase identifier,
      2. ".", or
      3. ".."
2. may 
   1. NOT have file-name extensions -- _Example:_ ".js" --
   2. be 
      1. "relative"
         1. == FIRST term is "." or ".."
         2. resolved relative to the identifier of the module in which "require" is written and called 
      2. "top-level"  
         1. resolved from the root of the module namespace

### Unspecified ###

1. Whether modules are 
   1. stored | database, file system, or factory functions
   2. interchangeable -- with -- link libraries
2. Whether a PATH -- is supported by the -- module loader / resolves module identifiers

Sample Code
-----------

*math.js:*

    :::js
    exports.add = function() {
        var sum = arguments[0];
        for (var i=1; i < arguments.length; i++) {
            sum += arguments[i];
        }
        return sum;
    };

*increment.js:*
    
    :::js
    var add = require('math').add;
    
    exports.increment = function(val) {
        return add(val, 1);
    };

*program.js:*

    :::js
    var inc = require('increment').increment;
    var a = 1;
    inc(a); // 2

Related Documents
-----------------

* Proposal to ECMA TC39: [Module System for ES-Harmony](http://docs.google.com/Doc?id=dfgxb7gk_34gpk37z9v&hl=en)
* Presentation to ECMA TC39: [Modules](http://docs.google.com/Presentation?docid=dcd8d5dk_0cs639jg8&hl=en)
